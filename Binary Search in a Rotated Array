Question 2: Binary Search in a Rotated Array
Given a rotated sorted array of integers and a target value, find the index of the target value in the array using binary search. If the target value is not found, return -1.

```
#include <iostream>
using namespace std;

int binarySearchRotated(int arr[], int n, int target) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == target) {
            return mid;
        }
        if (arr[low] <= arr[mid]) {
            if (arr[low] <= target && target < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        } else {
            if (arr[mid] < target && target <= arr[high]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
    }
    return -1;
}

int main() {
    int arr[] = {4, 5, 6, 1, 2, 3};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 2;
    int result = binarySearchRotated(arr, n, target);
    cout << "Index of " << target << ": " << result << endl;
    return 0;
}
```

Output:
```
Index of 2: 4
``
