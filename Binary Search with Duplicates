Question 3: Binary Search with Duplicates
Given a sorted list of integers that may contain duplicates and a target value, find the first index of the target value in the list using binary search. If the target value is not found, return -1.

```
#include <iostream>
using namespace std;

int binarySearchDuplicates(int arr[], int n, int target) {
    int low = 0, high = n - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (arr[mid] == target) {
            if (mid == 0 || arr[mid - 1] != target) {
                return mid;
            } else {
                high = mid - 1;
            }
        } else if (arr[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1;
}

int main() {
    int arr[] = {1, 2, 2, 3, 4, 2};
    int n = sizeof(arr) / sizeof(arr[0]);
    int target = 2;
    int result = binarySearchDuplicates(arr, n, target);
    cout << "First index of " << target << ": " << result << endl;
    return 0;
}
```

Output:
```
First index of 2: 1
``
